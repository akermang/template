{"version":3,"sources":["logo.svg","componets/My.component.jsx","services/api.service.js","componets/Header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MyComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","inputValue","hits","value","setState","getData","query","_this2","fetch","then","response","ok","json","Error","fetchtData","data","catch","error","clearTimeout","timeoutId","concat","setTimeout","startFetchData","bind","_this3","_this$state","react_default","a","createElement","className","index_es","onChange","e","inputOnChange","target","placeholder","autoFocus","variant","color","style","marginLeft","onClick","map","hit","key","objectID","href","url","rel","title","Component","HeaderComponent","_ref","name","App","Header_component","My_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0MC8EzBC,cAtEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAW,EACXC,WAAY,GACZC,KAAM,IALSV,6EASLW,GACZR,KAAKS,SAAS,CAAEH,WAAYE,GAASR,KAAKU,QAAQF,2CAGrCG,GAAO,IAAAC,EAAAZ,KACpBA,KAAKS,SAAS,CAAEJ,WAAW,IChBL,SAACM,GACvB,OAAOE,IAHC,uCAGWF,GACdG,KAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEpB,MAAM,IAAIC,MAAM,8BDWxBC,CAAWR,GACRG,KAAK,SAAAM,GAAI,OAAIR,EAAKH,SAAS,CAAEF,KAAMa,EAAKb,KAAMF,WAAW,MACzDgB,MAAM,SAAAC,GAAK,OAAIV,EAAKH,SAAS,CAAEa,QAAOjB,WAAW,sCAG9CG,GAGN,GAFAe,aAAavB,KAAKwB,WAClBxB,KAAKS,SAAS,CAAEJ,WAAW,IACb,KAAVG,EAAJ,CACA,IAAIG,EAAK,UAAAc,OAAajB,GACtBR,KAAKwB,UAAYE,WAAW1B,KAAK2B,eAAeC,KAAK5B,KAAMW,GAAQ,uCAG5D,IAAAkB,EAAA7B,KAAA8B,EACiC9B,KAAKI,MAArCG,EADDuB,EACCvB,KAAMF,EADPyB,EACOzB,UAAWC,EADlBwB,EACkBxB,WACzB,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACdH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACE3B,MAAOF,EACP8B,SAAU,SAAAC,GAAC,OAAIR,EAAKS,cAAcD,EAAEE,OAAO/B,QAC3CgC,YAAY,YACZC,WAAS,IAEXV,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEO,QAAQ,WAAWC,MAAM,UACzBC,MAAO,CAAEC,WAAY,OACrBC,QAAS,kBAAMjB,EAAKnB,QAAQJ,KAH9B,WAQDD,EAAY0B,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UAAhB,cAA6C,KAE1DH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACG5B,EAAKwC,IAAI,SAAAC,GAAG,OACXjB,EAAAC,EAAAC,cAAA,KAAGgB,IAAKD,EAAIE,UACVnB,EAAAC,EAAAC,cAAA,KACEkB,KAAMH,EAAII,IACVlB,UAAU,WACVK,OAAO,SACPc,IAAI,uBAEHL,EAAIM,oBA5DGC,aEDXC,EAJS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACtB3B,EAAAC,EAAAC,cAAA,OAAKC,UAAW,oBAAhB,0BAAAT,OAA4DiC,KCc/CC,mLATX,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAC2B,EAAD,CAAiBF,KAAK,UACtB3B,EAAAC,EAAAC,cAAC4B,EAAD,cANWN,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,KAAK,SAAA6D,GACjCA,EAAaC","file":"static/js/main.9f799a55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"../logo.svg\";\nimport { fetchtData } from \"../services/api.service.js\";\nimport { TextField } from \"@material-ui/core\";\nimport { List, MenuItem, Button } from \"@material-ui/core\";\nimport Icon from '@material-ui/core/Icon';\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      inputValue: \"\",\n      hits: []\n    };\n  }\n\n  inputOnChange(value) {\n    this.setState({ inputValue: value }, this.getData(value));\n  }\n\n  startFetchData(query) {\n    this.setState({ isLoading: true });\n    fetchtData(query)\n      .then(data => this.setState({ hits: data.hits, isLoading: false }))\n      .catch(error => this.setState({ error, isLoading: false }));\n  }\n\n  getData(value) {\n    clearTimeout(this.timeoutId);\n    this.setState({ isLoading: false });\n    if (value === \"\") return;\n    let query = `?query=${value}`;\n    this.timeoutId = setTimeout(this.startFetchData.bind(this, query), 500);\n  }\n\n  render() {\n    const { hits, isLoading, inputValue } = this.state;\n    return (\n      <div className=\"container\">\n        <div className={\"main-container\"}>\n          <div>\n            <TextField\n              value={inputValue}\n              onChange={e => this.inputOnChange(e.target.value)}\n              placeholder=\"Search...\"\n              autoFocus\n            />\n            <Button\n              variant=\"outlined\" color=\"primary\"\n              style={{ marginLeft: \"8px\" }}\n              onClick={() => this.getData(inputValue)}\n            >\n              search\n            </Button>\n          </div>\n          {isLoading ? <div className={\"loader\"}>Loading...</div> : null}\n\n          <List>\n            {hits.map(hit => (\n              <p key={hit.objectID}>\n                <a\n                  href={hit.url}\n                  className=\"App-link\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {hit.title}\n                </a>\n              </p>\n            ))}\n          </List>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MyComponent;\n","import fetch from 'isomorphic-fetch';\n// import {polyfill} from 'es6-promise';\n\n// Gal's example //\nconst API = 'https://hn.algolia.com/api/v1/search';\n\nexport const fetchtData = (query) => {\n    return fetch(API + query)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n            throw new Error('Something went wrong ...');\n        })\n}\n\n// Gal's example 2 //  \n\n// export const createNewProfile = (profile) => {\n//     const formData = new FormData();\n//     formData.append('first_name', profile.firstName);\n//     formData.append('last_name', profile.lastName);\n//     formData.append('email', profile.email);\n//     return fetch('http://example.com/api/v1/registration', {\n//         method: 'POST',\n//         body: formData\n//     })\n//         .then(response => response.json())\n// }\n\n// createNewProfile(profile)\n//     .then((json) => {\n//         // handle success\n//     })\n//     .catch(error => error);\n\n\n// Gal's example 3 //\n// function update(data) {\n//     return fetch('/api/update', {\n//         method: 'put',\n//         body: JSON.stringify(data),\n//         headers: {\n//             'Accept': 'application/json',\n//             'Content-Type': 'application/json',\n\n//         }\n//     })\n//         .then(response => {\n//             if (response.ok) {\n//                 return response.jason();\n//             }\n//             throw new Error('Something went wrong ...');\n//         })\n    // .then(data => this.setState({ hits: data.hits, isLoading: false }))\n    // .catch(error => this.setState({ error, isLoading: false }));\n// }\n\n\n\n// Example POST method implementation:\n// postData(`http://example.com/answer`, { answer: 42 })\n//     .then(data => console.log(JSON.stringify(data))) // JSON-string from `response.json()` call\n//     .catch(error => console.error(error));\n\n// function postData(url = ``, data = {}) {\n//     // Default options are marked with *\n//     return fetch(url, {\n//         method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n//         mode: \"cors\", // no-cors, cors, *same-origin\n//         cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n//         credentials: \"same-origin\", // include, *same-origin, omit\n//         headers: {\n//             \"Content-Type\": \"application/json\",\n//             // \"Content-Type\": \"application/x-www-form-urlencoded\",\n//         },\n//         redirect: \"follow\", // manual, *follow, error\n//         referrer: \"no-referrer\", // no-referrer, *client\n//         body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n//     })\n//         .then(response => response.json()); // parses response to JSON\n// }\n\n\n// POST adds a random id to the object sent\n// fetch('https://jsonplaceholder.typicode.com/posts', {\n//     method: 'POST',\n//     body: JSON.stringify({\n//       title: 'foo',\n//       body: 'bar',\n//       userId: 1\n//     }),\n//     headers: {\n//       \"Content-type\": \"application/json; charset=UTF-8\"\n//     }\n//   })\n//   .then(response => response.json())\n//   .then(json => console.log(json))\n\n//   fetch('https://jsonplaceholder.typicode.com/posts/1', {\n//     method: 'PUT',\n//     body: JSON.stringify({\n//       id: 1,\n//       title: 'foo',\n//       body: 'bar',\n//       userId: 1\n//     }),\n//     headers: {\n//       \"Content-type\": \"application/json; charset=UTF-8\"\n//     }\n//   })\n//   .then(response => response.json())\n//   .then(json => console.log(json))\n\n// fetch('https://jsonplaceholder.typicode.com/posts/1', {\n//     method: 'PATCH',\n//     body: JSON.stringify({\n//       title: 'foo'\n//     }),\n//     headers: {\n//       \"Content-type\": \"application/json; charset=UTF-8\"\n//     }\n//   })\n//   .then(response => response.json())\n//   .then(json => console.log(json))\n\n// fetch('https://jsonplaceholder.typicode.com/posts/1', {\n//   method: 'DELETE'\n// })\n\n\n\n\n\n","import React from \"react\";\n\nconst HeaderComponent = ({ name }) => (\n  <div className={\"header-component\"}> {`Hello World And Hi ${name}`}</div>\n);\n\nexport default HeaderComponent;\n","import React, { Component } from 'react';\nimport './App.css';\nimport MyComponent from './componets/My.component.jsx';\nimport HeaderComponent from './componets/Header.component.jsx'\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n       <HeaderComponent name=\"Gal A\"/>\n       <MyComponent/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}